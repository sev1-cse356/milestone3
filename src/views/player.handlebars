<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Video Player</title>
    <script src="https://cdn.dashjs.org/latest/dash.all.min.js"></script>
    <style>

      body {
        display: flex;
        height: 100vh;
        margin: 0;
      }

      .leftColumn {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: flex-start;
        padding: 15px;
        height: 100vh;  /* Make the column take the full height */
      }

      #homeBtn {
        width: 120px;
        padding: 10px;
        background-color: #8e8e8e;
        color: white;
        font-size: 16px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
      }

      #homeBtn:hover {
        background-color: #a9a9a9;
      }

      #playPauseBtn button {
        width: 120px;
        padding: 10px;
        background-color: #8e8e8e;
        color: white;
        font-size: 16px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        margin-bottom: 25px;
      }

      #playPauseBtn button:hover {
        background-color: #a9a9a9;
      }
.videoContainer {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    scroll-snap-type: y mandatory;  /* Ensures scroll snapping is active */
    overflow-y: auto;               /* Enable scrolling */
    height: 100vh;                  /* Full viewport height */
    align-items: center;            /* Center items horizontally */
    justify-content: flex-start;    /* Start items from the top */
    scroll-behavior: smooth;        /* Smooth transition for scrolling */
}

.videoItem {
    scroll-snap-align: center;      /* Snap video to the center */
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100vh;                  /* Make each video take up full height */
    margin: 0;
    padding: 0;
    position: relative;
}
      .buttonsContainer {
        display: flex;
        flex-direction: column;
        position: relative;
        padding-left: 20px;
        padding-top: 20px;
      }

      .likeDislikeBtn {
        width: 80px;
        padding: 10px;
        margin: 5px 0;
        background-color: #8e8e8e;
        color: white;
        font-size: 16px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
      }

      .likeDislikeBtn.liked {
        background-color: green;
      }

      .likeDislikeBtn.disliked {
        background-color: red;
      }

      .likeDislikeBtn:hover {
        background-color: #a9a9a9;
      }

      .likeDislikeBtn.liked:hover {
        background-color: green;
        cursor: default;
      }

      .likeDislikeBtn.disliked:hover {
        background-color: red;
        cursor: default;
      }
    </style>
  </head>
  <body>
    <div class="leftColumn">
      <button id="homeBtn">Return To Homepage</button>
      <div id="playPauseBtn">
        <button>Play/Pause</button>
      </div>
    </div>

    <div class="videoContainer">
      <div id="videoList"></div>

      {{!-- <div id="playPauseBtn">Play</div> --}}
    </div>

    <script>
      const homeBtn = document.getElementById('homeBtn');
      const playPauseBtn = document.getElementById('playPauseBtn');
      const videoList = document.getElementById('videoList');

      let watchHistory = [];
      let historyIndex = 0;

      let currentVideoId = '{{videoId}}';
      let currentPlayer = null;

      function observeVideo(videoElement, player) {
        const observer = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            const video = entry.target;
            const videoId = entry.target.id;
            if (entry.isIntersecting) {
              {{!-- history.pushState(null, '', `/play/${videoId}`); --}}
              {{!-- video.play().catch(err => console.log('Autoplay failed: ', err)); --}}

              currentPlayer = player;

              fetch('/api/view', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  id: videoId,
                })
              })
              .then(response => response.json())
              .then(data => {
                  console.log(`Video ${videoId} already viewed? : ${data.viewed}`);
              })
              .catch(error => console.error(`Error updating viewed on ${videoId}: ${error}`));
            } else {
              const video = entry.target;
              video.pause();
            }
          });
        }, {
          threshold: 0.1
        });
        observer.observe(videoElement, player);
      }

      function createVideoDivs(vidId) { 
        const videoItem = document.createElement('div');
        videoItem.classList.add('videoItem');

        const videoElement = document.createElement('video');
        videoElement.setAttribute('controls', true);
        videoElement.style.width = "100%";
        videoElement.id = `${vidId}`;

        const buttonsContainer = document.createElement('div');
        buttonsContainer.classList.add('buttonsContainer');

        const likeBtn = document.createElement('button');
        likeBtn.classList.add('likeDislikeBtn');
        likeBtn.textContent = 'Like';
        likeBtn.setAttribute('name', 'like'); // Add name attribute

        const dislikeBtn = document.createElement('button');
        dislikeBtn.classList.add('likeDislikeBtn');
        dislikeBtn.textContent = 'Dislike';
        dislikeBtn.setAttribute('name', 'dislike');

        likeBtn.addEventListener('click', () => {
          likeBtn.classList.toggle('liked');
          dislikeBtn.classList.remove('disliked');
          const isLiked = likeBtn.classList.contains('liked') ? true : null;
          fetch('/api/like', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              id: vidId,
              value: isLiked
            })
          })
          .catch(error => console.error(`Error updating like on video ${vidId}: ${error}`));
        });

        dislikeBtn.addEventListener('click', () => {
          dislikeBtn.classList.toggle('disliked');
          likeBtn.classList.remove('liked');
          const isDisliked = likeBtn.classList.contains('liked') ? false : null;
          fetch('/api/like', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              id: vidId,
              value: isDisliked
            })
          })
          .then(response => response.json())
          .then(data => {
              console.log(`Video ${vidId} now has ${data.likes}`);
          })
          .catch(error => console.error(`Error updating dislike on video ${vidId}: ${error}`));
        });

        buttonsContainer.appendChild(likeBtn);
        buttonsContainer.appendChild(dislikeBtn);

        videoItem.appendChild(videoElement);
        videoItem.appendChild(buttonsContainer);

        videoList.appendChild(videoItem);

        const manifestUrl = `/api/manifest/${vidId}_padded_output.mpd`;
        const player = dashjs.MediaPlayer().create();
        player.initialize(videoElement, manifestUrl, false);

        watchHistory.push({ videoId: vidId, player: player });
        observeVideo(videoElement, player);
      }

      function preloadVideos(count) {
          fetch('/api/videos', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({ count: count })
          })
          .then(response => response.json())
          .then(data => {
              data.videos.sort((a, b) => a.id - b.id); // Sort by ID or any order property
              data.videos.forEach((vid) => {
                  createVideoDivs(vid.title);
              });
          })
          .catch(error => console.error(`Error getting recommended videos: ${error}`));
      }

      homeBtn.addEventListener('click', () => {
        window.location.href = '/';
      });

      playPauseBtn.onclick = () => {
        if (currentPlayer) {
          if (currentPlayer.isPaused()) {
            currentPlayer.play();
            {{!-- playPauseBtn.textContent = 'Pause'; --}}
          } else {
            currentPlayer.pause();
            {{!-- playPauseBtn.textContent = 'Play'; --}}
          }
        }
      }

      let scrollTimeout = null;
      const debounceDuration = 250;

      window.addEventListener('wheel', async (event) => {
        {{!-- event.preventDefault();  --}}
        if (scrollTimeout) return;

        scrollTimeout = setTimeout(() => {
          scrollTimeout = null;
        }, debounceDuration);
        
          if (event.deltaY < 0) {
            // Scroll up: Load previous video
            if (historyIndex > 0) {
              historyIndex--;
            }
          } else {
            historyIndex++;
          }
        
        history.pushState(null, '', `/play/${watchHistory[historyIndex].videoId}`);

        const videoElement = document.getElementById(watchHistory[historyIndex].videoId);

        if (videoElement) {
          currentPlayer = watchHistory[historyIndex].player;

          // Scroll to the video element smoothly
          {{!-- videoElement.scrollIntoView({ behavior: 'auto', block: 'center' }); --}}

          // Optionally, you can also play the video if it's in view
          videoElement.play().catch(err => console.log('Autoplay failed: ', err));
        } 
        
        if (historyIndex === (watchHistory.length - 3)) {
          preloadVideos(8);
        }
      });

      // Load the initial video
      createVideoDivs(currentVideoId);
      currentPlayer = watchHistory[0].player;

      // Preload possible video recommendations
      preloadVideos(8);

    </script>
    {{!-- <script>
        document.addEventListener('DOMContentLoaded', function() {
        var url = 'http://sev-1.cse356.compas.cs.stonybrook.edu/play/5381274-uhd_4096_2160_30fps'; // Adjust to your server's address
        var player = dashjs.MediaPlayer().create();
        var video = document.getElementById('videoPlayer');
        var playPauseBtn = document.getElementById('playPauseBtn');

        player.initialize(video, url, false);

        // Play/Pause functionality
        playPauseBtn.addEventListener('click', function() {
            if (video.paused) {
            video.play();
            } else {
            video.pause();
            }
        });
        });
    </script> --}}
  </body>
</html>
